// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @blobs/digest
const encoding0 = {
  preencode (state, m) {
    c.uint.preencode(state, m.blocks)
    c.uint.preencode(state, m.bytes)
    c.uint.preencode(state, m.blockSize)
  },
  encode (state, m) {
    c.uint.encode(state, m.blocks)
    c.uint.encode(state, m.bytes)
    c.uint.encode(state, m.blockSize)
  },
  decode (state) {
    const res = {}
    res.blocks = 0
    res.bytes = 0
    res.blockSize = 0

    res.blocks = c.uint.decode(state)
    res.bytes = c.uint.decode(state)
    res.blockSize = c.uint.decode(state)

    return res
  }
}

// @blobs/block
const encoding1 = {
  preencode (state, m) {
    c.uint.preencode(state, m.index)
    c.raw.preencode(state, m.value)
  },
  encode (state, m) {
    c.uint.encode(state, m.index)
    c.raw.encode(state, m.value)
  },
  decode (state) {
    const res = {}
    res.index = 0
    res.value = null

    res.index = c.uint.decode(state)
    res.value = c.raw.decode(state)

    return res
  }
}

// @blobs/digest/value
const encoding2 = {
  preencode (state, m) {
    c.uint.preencode(state, m.blocks)
    c.uint.preencode(state, m.bytes)
    c.uint.preencode(state, m.blockSize)
  },
  encode (state, m) {
    c.uint.encode(state, m.blocks)
    c.uint.encode(state, m.bytes)
    c.uint.encode(state, m.blockSize)
  },
  decode (state) {
    const res = {}
    res.blocks = 0
    res.bytes = 0
    res.blockSize = 0

    res.blocks = c.uint.decode(state)
    res.bytes = c.uint.decode(state)
    res.blockSize = c.uint.decode(state)

    return res
  }
}

// @blobs/blocks/value
const encoding3 = {
  preencode (state, m) {
    c.raw.preencode(state, m.value)
  },
  encode (state, m) {
    c.raw.encode(state, m.value)
  },
  decode (state) {
    const res = {}
    res.value = null

    res.value = c.raw.decode(state)

    return res
  }
}

function getStructByName (name) {
  switch (name) {
    case '@blobs/digest': return encoding0
    case '@blobs/block': return encoding1
    case '@blobs/digest/value': return encoding2
    case '@blobs/blocks/value': return encoding3
    default: throw new Error('Encoder not found ' + name)
  }
}

function resolveStruct (name, v = VERSION) {
  const enc = getStructByName(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

module.exports = { resolveStruct, version }
